(define (! n)
  (if (zero? n)
    1
    (* n (! (- n 1)))))

(! 5)

[
Assume for n=1 that the following :(define x 2) :x is true so that bla bla
]
x

(define prod *)
(list 2 4)
(list (define y 2)  y (prod 5 2 19) (+ y 2) (+ 1 2 3) (- 2 8))

(define potato #t)

[Testing the various quotes]

'(normal quote)

`(1 2 ,(list 2 3))


(define (double lst)
  (if (null? lst)
    '()
    (cons (* 2 (car lst)) (double (cdr lst)))))

(double '(2 4 5))


(define (doub n)
  (* 2 n))

(define (map fn lst)
  (if (null? lst)
    '()
    (cons (fn (car lst)) (map fn (cdr lst)))))


(map doub '(2 4 5))
