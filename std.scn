; define a function to map across elements
(define (map fn lst)
  (if (null? lst)
    '()
    (cons (fn (car lst)) (map fn (cdr lst)))))

; unary predicates
(define (null? lst)
  (eq? lst '()))

(define (zero? val)
  (eq? val 0))

;; macro stuff
;(defmacro (bind-vars bindings)
;  `(map car bindings))
;
;;(define (cadr pair) (car (cdr pair)))
;
;(defmacro (bind-vals bindings)
;  `(map cadr bindings))
;
;(defmacro (let bindings body)
;  `(apply (lambda ,(bind-vars bindings) ,body) ',(bind-vals bindings)))
'()


(quote (+ 13 3))
